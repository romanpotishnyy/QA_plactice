Impact Analysis: 6 шагов, которые облегчат тестирование изменений:

Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте 
при разработке новой или изменении старой функциональности, а также определить, насколько значительно они были затронуты.

Затронутые области требуют большего внимания во время проведения регрессионного тестирования.

Отмечу сразу, чтобы не пугать QA: импакт анализ не есть "чтение кода". Он включает в себя и иные способы исследования.

Когда нужно проводить Impact Analysis?

1.есть изменения в требованиях;

2.получен запрос на внесение изменений в продукт;

3.ожидается внедрение нового модуля или функциональности в существующий продукт;

4.каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.

Для чего нужно проводить Impact Analysis?

Информация о взаимосвязи и взаимном влиянии изменений могут помочь QA:

1.сфокусироваться на тестировании функциональности, где изменения были представлены;

2.принять во внимание части проекта, которые были затронуты изменениями и, возможно, пострадали;

3.не тратить время на тестирование тех частей проекта, которые не были затронуты изменениями.

6 Шагов как проводить ИМПАКТ АНАЛИЗ: 

1)Изучать issue\ticket\bug\change request *.

2)Читать email переписку **.

3)Разговаривать с разработчиками **.

4)Смотреть на место где было изменение (commit place) ***.

5)Смотреть на описание изменения (commit description) ***.

6)Смотреть на изменения в коде *****.

'*' показывает "уровень сложности" этого действия. Как видно, только "шаг 6" требует умения читать код, 
с "шагами 1-5" способен справится QA и без знаний языков программирования.

1.  Изучение issue\ticket\bug\change request *

Самое основное и базовое (поэтому и сложность *), что нужно сделать,
 - это внимательно изучить ишью в баг-трекинговой системе. Следует обратить внимание на все поля, особенно:

Steps To Repeat;

Description;

Additional Background Information;

Attachment;

Некоторые важные условия или особенности, описанные в ишью, помогут вам идентифицировать область тестирования. 
Например, при внимательном прочтении ишью, вы обнаружили, что в 'Additional Background Information' стоит пометка, 
что проблема воспроизводится только при использовании HTTPs. 
Поэтому для себя можно отметить, что при тестировании неплохо было бы проверить и случай с HTTP.

2. Чтение emails **

Много можно найти в переписках, относящихся к вашей задаче, что было пропущено и не указано в ишью:

а)больше деталей от заказчиков;

б)результаты исследований от других членов команды;

в)список похожих проблем;

г)картинки, графики, схемы и другое.

Сложность этого действия "**", только потому, что в переписках может быть больше технической информации или "сленга" разработчиков.

3. Разговор с разработчиками **

Во время тестирования изменений ваша цель - найти как можно больше "поломавшегося" и поэтому стоит смело подойти к разработчикам, 
к тем "кто возможно поломал" и спросить напрямую: "Ты сделал изменения, подскажи, на что они могут повлиять, 
какие области\модули мне нужно проверить тщательнее". Хороший разработчик, понимающий, что чем раньше баг будет обнаружен, 
тем дешевле будет его исправить, поможет вам советом, даже если будет абсолютно уверен в своих сделанных изменениях.

4. Изучение места, где было сделано изменение ***

Изменения, которые сделаны, должны быть куда-то внесены. 
Например, это git, где достаточно легко можно определить место, где были сделаны изменения. 
Под "местом" я понимаю "конкретный файл, конкретная функция\метод, конкретный модуль". 
И следовательно, это "место" (этот модуль, функциональность) следует перепроверить, протестировать на наличие регрессий.

Например, если изменения были в 'ExtendedClassification' функциональности, 
поэтому хотя бы, Smoke Test для этой функциональности должен быть пройден.

Так же, если изменения были в каких-то клиентских файлах ( JS, HTML, CSS, etc.), то следует провести кроссбраузерное тестирование.

Сложность "***" - чтение кода всё ещё не требуется, но нужно иметь представление об архитектуре проекта.

5. Изучение описания изменений ***

Для того, чтобы QA могли описания изучать, сначала нужно добиться того, чтобы Developers начали писать грамотные и понятные описания изменений. 
Пример шаблона, для описания изменении (git commits):

Ticket number and title
- Bug:
{В чём состоит дефект, какое актуальное поведение системы?}
- Problem:
{первопричина дефекта, что в системе работает не так?}
- Fix:
{в чём состоит изменение}

Например, исходя из описания исходной проблемы "Логика не работает при версировании root ItemType" (изображение сверху), следует, 
что нужно проверить "данную логику при версировании root ItemType". 
И имея в наличие только bug и его описание, эта важная проверка не столь очевидна и может быть пропущена.

6. Исследование кода изменений *****

Тут всё просто - нужно читать код и представлять, что он делает. Конечно, не многим это под силу на данном этапе, но есть к чему стремиться.
К тому же, от QA не требуется глубокого понимание кода. 
Базовых знаний программирования и поверхностных знаний ООП вполне достаточно, чтобы представить use case, покрывающий основные функции этого кода.














